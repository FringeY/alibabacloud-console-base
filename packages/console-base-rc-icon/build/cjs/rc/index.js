"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Icon;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _consoleBaseStyledMixin = require("@alicloud/console-base-styled-mixin");

var _const = require("../const");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n      transform: rotate(", "deg);\n    "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  animation: ", " 1s linear infinite;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  ", ";\n  font-family: ", " !important;\n  \n  &:before {\n    content: '", "';\n    ", ";\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  0% {\n    transform: rotate(0deg);\n    transform-origin: 50% 50%;\n  }\n  \n  100% {\n    transform: rotate(1turn);\n    transform-origin: 50% 50%;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var fontFamily = _consoleBaseStyledMixin.glyph.injectGlobalFontFace({
  projectId: '1256165',
  hash: '5hvfha9x7ut',
  dataUrl: 'data:application/x-font-woff2;charset=utf-8;base64,'
});

var kfRotate = (0, _styledComponents.keyframes)(_templateObject());

var ScI = _styledComponents.default.i(_templateObject2(), _consoleBaseStyledMixin.glyph.base, fontFamily, function (props) {
  return props.code;
}, function (props) {
  return props.rotateCss;
});

var cssLoading = (0, _styledComponents.css)(_templateObject3(), kfRotate);
/**
 * ConsoleBase 项目自用的图标组件
 */

function Icon(_ref) {
  var type = _ref.type,
      _ref$rotate = _ref.rotate,
      rotate = _ref$rotate === void 0 ? 0 : _ref$rotate,
      props = (0, _objectWithoutProperties2.default)(_ref, ["type", "rotate"]);
  var code = _const.EIconType[type];
  var rotateCss = null;

  if (code === _const.EIconType.loading) {
    rotateCss = cssLoading;
  } else if (rotate > 0) {
    rotateCss = (0, _styledComponents.css)(_templateObject4(), rotate);
  }

  return /*#__PURE__*/_react.default.createElement(ScI, _objectSpread(_objectSpread({}, props), {}, {
    code: code ? "\\".concat(code) : '',
    rotateCss: rotateCss
  }));
}