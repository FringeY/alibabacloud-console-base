{"remainingRequest":"/Users/jianchun.wang/zombie/@console-base/alibabacloud-console-base/node_modules/thread-loader/dist/cjs.js??ref--9-1!/Users/jianchun.wang/zombie/@console-base/alibabacloud-console-base/node_modules/@alicloud/console-toolkit-plugin-typescript/node_modules/ts-loader/index.js??ref--9-2!/Users/jianchun.wang/zombie/@console-base/alibabacloud-console-base/packages/console-fetcher-interceptor-res-risk/src/util/risk/verify/content/index.tsx","dependencies":[{"path":"/Users/jianchun.wang/zombie/@console-base/alibabacloud-console-base/packages/console-fetcher-interceptor-res-risk/src/util/risk/verify/content/index.tsx","mtime":1606374668203},{"path":"/Users/jianchun.wang/zombie/@console-base/alibabacloud-console-base/node_modules/cache-loader/dist/cjs.js","mtime":1606739830244},{"path":"/Users/jianchun.wang/zombie/@console-base/alibabacloud-console-base/node_modules/thread-loader/dist/cjs.js","mtime":1606739824609},{"path":"/Users/jianchun.wang/zombie/@console-base/alibabacloud-console-base/node_modules/@alicloud/console-toolkit-plugin-typescript/node_modules/ts-loader/index.js","mtime":1606739827333}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwp2YXIgX19tYWtlVGVtcGxhdGVPYmplY3QgPSAodGhpcyAmJiB0aGlzLl9fbWFrZVRlbXBsYXRlT2JqZWN0KSB8fCBmdW5jdGlvbiAoY29va2VkLCByYXcpIHsKICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgInJhdyIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfQogICAgcmV0dXJuIGNvb2tlZDsKfTsKdmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkgewogICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHsKICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTsKICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKQogICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfTsKICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9Owp2YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7CiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pOwp9KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikgewogICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gazsKICAgIG9bazJdID0gbVtrXTsKfSkpOwp2YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCAiZGVmYXVsdCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7Cn0pIDogZnVuY3Rpb24obywgdikgewogICAgb1siZGVmYXVsdCJdID0gdjsKfSk7CnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkgewogICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDsKICAgIHZhciByZXN1bHQgPSB7fTsKICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSAiZGVmYXVsdCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7CiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpOwogICAgcmV0dXJuIHJlc3VsdDsKfTsKdmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7CiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7ICJkZWZhdWx0IjogbW9kIH07Cn07Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciByZWFjdF8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoInJlYWN0IikpOwp2YXIgc3R5bGVkX2NvbXBvbmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJzdHlsZWQtY29tcG9uZW50cyIpKTsKdmFyIGNvbnNvbGVfYmFzZV9zdHlsZWRfbWl4aW5fMSA9IHJlcXVpcmUoIkBhbGljbG91ZC9jb25zb2xlLWJhc2Utc3R5bGVkLW1peGluIik7CnZhciBjb25zb2xlX2Jhc2VfcmNfZGlhbG9nXzEgPSByZXF1aXJlKCJAYWxpY2xvdWQvY29uc29sZS1iYXNlLXJjLWRpYWxvZyIpOwp2YXIgY29uc29sZV9iYXNlX3JjX2J1dHRvbl8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoIkBhbGljbG91ZC9jb25zb2xlLWJhc2UtcmMtYnV0dG9uIikpOwp2YXIgY29uc29sZV9iYXNlX3JjX2lucHV0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZSgiQGFsaWNsb3VkL2NvbnNvbGUtYmFzZS1yYy1pbnB1dCIpKTsKdmFyIGNvbnNvbGVfYmFzZV9yY19mbGV4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZSgiQGFsaWNsb3VkL2NvbnNvbGUtYmFzZS1yYy1mbGV4IikpOwp2YXIgY29uc3RfMSA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2NvbnN0Iik7CnZhciBpbnRsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZSgiLi4vLi4vLi4vLi4vaW50bCIpKTsKdmFyIGZvcm1fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCIuLi8uLi8uLi8uLi9yYy9mb3JtIikpOwp2YXIgaW50bF92ZXJpZnlfMSA9IHJlcXVpcmUoIi4uLy4uLy4uL2ludGwtdmVyaWZ5Iik7CnZhciBnZW5lcmF0ZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoIi4vZ2VuZXJhdGUiKSk7CnZhciBTY0luZm8gPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuc3Ryb25nKHRlbXBsYXRlT2JqZWN0XzEgfHwgKHRlbXBsYXRlT2JqZWN0XzEgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbIlxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbiJdLCBbIlxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcbiJdKSkpOwp2YXIgU2NJbnB1dCA9IHN0eWxlZF9jb21wb25lbnRzXzEuZGVmYXVsdChjb25zb2xlX2Jhc2VfcmNfaW5wdXRfMS5kZWZhdWx0KSh0ZW1wbGF0ZU9iamVjdF8yIHx8ICh0ZW1wbGF0ZU9iamVjdF8yID0gX19tYWtlVGVtcGxhdGVPYmplY3QoWyJcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICB3aWR0aDogMTAwcHg7XG4iXSwgWyJcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICB3aWR0aDogMTAwcHg7XG4iXSkpKTsKdmFyIFNjRXJyb3IgPSBzdHlsZWRfY29tcG9uZW50c18xLmRlZmF1bHQuZGl2KHRlbXBsYXRlT2JqZWN0XzMgfHwgKHRlbXBsYXRlT2JqZWN0XzMgPSBfX21ha2VUZW1wbGF0ZU9iamVjdChbIlxuICBtYXJnaW4tdG9wOiA4cHg7XG4gIGNvbG9yOiAiLCAiO1xuIl0sIFsiXG4gIG1hcmdpbi10b3A6IDhweDtcbiAgY29sb3I6ICIsICI7XG4iXSkpLCBjb25zb2xlX2Jhc2Vfc3R5bGVkX21peGluXzEuQ09MT1IuRVJST1IpOwpmdW5jdGlvbiBDb250ZW50KCkgewogICAgdmFyIF9hID0gY29uc29sZV9iYXNlX3JjX2RpYWxvZ18xLnVzZURpYWxvZygpLCBfYiA9IF9hLmRhdGEsIF9jID0gX2Iucmlza0luZm8sIHR5cGUgPSBfYy50eXBlLCBkZXRhaWwgPSBfYy5kZXRhaWwsIFVSTF9TRVRUSU5HUyA9IF9iLnJpc2tDb25maWcuVVJMX1NFVFRJTkdTLCBlcnJvck1lc3NhZ2UgPSBfYi5lcnJvck1lc3NhZ2UsIHVwZGF0ZURhdGEgPSBfYS51cGRhdGVEYXRhOwogICAgdmFyIGhhbmRsZUlucHV0Q2hhbmdlID0gcmVhY3RfMS51c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB1cGRhdGVEYXRhKHsKICAgICAgICAgICAgY29kZTogdmFsdWUudHJpbSgpLAogICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICcnIC8vIOa4heepuumUmeivrwogICAgICAgIH0pOwogICAgfSwgW3VwZGF0ZURhdGFdKTsKICAgIHJldHVybiByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChmb3JtXzEuZGVmYXVsdCwgX19hc3NpZ24oe30sIHsKICAgICAgICBpdGVtczogW3sKICAgICAgICAgICAgICAgIGxhYmVsOiBpbnRsX3ZlcmlmeV8xLmludGxWZXJpZnlMYWJlbCh0eXBlKSwKICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGNvbnNvbGVfYmFzZV9yY19mbGV4XzEuZGVmYXVsdCwgeyBhbGlnbjogImNlbnRlciIgfSwKICAgICAgICAgICAgICAgICAgICBkZXRhaWwgPyByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChTY0luZm8sIG51bGwsIGRldGFpbCkgOiBudWxsLAogICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGNvbnNvbGVfYmFzZV9yY19idXR0b25fMS5kZWZhdWx0LCBfX2Fzc2lnbih7fSwgewogICAgICAgICAgICAgICAgICAgICAgICBzcG06ICJzZXQtIiArIHR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNldDogY29uc29sZV9iYXNlX3JjX2J1dHRvbl8xLkVCdXR0b25QcmVzZXQuTElOSywKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGludGxfdmVyaWZ5XzEuaW50bFZlcmlmeVNldHRpbmcodHlwZSksCiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IFVSTF9TRVRUSU5HUwogICAgICAgICAgICAgICAgICAgIH0pKSkKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgbGFiZWw6IGludGxfMS5kZWZhdWx0KCdhdHRyOmNvZGUnKSwKICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLAogICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGNvbnNvbGVfYmFzZV9yY19mbGV4XzEuZGVmYXVsdCwgeyBhbGlnbjogImNlbnRlciIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2NJbnB1dCwgX19hc3NpZ24oe30sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVJbnB1dENoYW5nZQogICAgICAgICAgICAgICAgICAgICAgICB9KSksCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IGNvbnN0XzEuRVZlcmlmeVR5cGUuTUZBID8gbnVsbCA6IHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGdlbmVyYXRlXzEuZGVmYXVsdCwgbnVsbCkpLAogICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNjRXJyb3IsIG51bGwsIGVycm9yTWVzc2FnZSkpCiAgICAgICAgICAgIH1dCiAgICB9KSk7Cn0KZXhwb3J0cy5kZWZhdWx0ID0gQ29udGVudDsKdmFyIHRlbXBsYXRlT2JqZWN0XzEsIHRlbXBsYXRlT2JqZWN0XzIsIHRlbXBsYXRlT2JqZWN0XzM7Cg=="},null]}